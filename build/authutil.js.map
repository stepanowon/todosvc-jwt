{"version":3,"file":"authutil.js","names":["_jsonwebtoken","_interopRequireDefault","require","_crypto","obj","__esModule","secretKey","process","env","JWT_SECRET_KEY","createToken","exports","_ref","userid","role","console","log","token","jwt","sign","iss","algorithm","expiresIn","createRefreshToken","_ref2","type","checkToken","_ref3","callback","verify","algorithms","err","decode","status","message","exp","Date","now","users","checkRefreshToken","_ref4","refresh_token","computeHMAC","password","createHash","update","digest"],"sources":["../src/authutil.js"],"sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport { createHash } from 'crypto'\r\n\r\nlet secretKey = \"mysecretkey\";\r\nif (process.env.JWT_SECRET_KEY) {\r\n    secretKey = process.env.JWT_SECRET_KEY;\r\n}\r\n\r\nconst createToken = ({ userid, role }) => {\r\n    console.log(userid + \", \"+role)\r\n    let token = jwt.sign({\r\n        userid, role, iss:\"jwt test server\" \r\n    }, secretKey, {\r\n        algorithm : \"HS256\",\r\n        expiresIn:\"1h\",\r\n    })\r\n    return token;\r\n}\r\n\r\nconst createRefreshToken = ({ userid, role, type }) => {\r\n    let token = jwt.sign({\r\n        userid, role, type, iss:\"jwt test server\" \r\n    }, secretKey, {\r\n        algorithm : \"HS256\",\r\n        expiresIn:\"7d\",\r\n    })\r\n    return token;\r\n}\r\n\r\nconst checkToken = ({ token, callback }) => {\r\n    jwt.verify(token, secretKey, { algorithms: ['HS256'] }, (err, decode) => { \r\n        if (err) {\r\n            callback({status: \"fail\", message:err })\r\n        } else {\r\n            const exp = new Date(decode.exp * 1000)\r\n            const now = Date.now()\r\n            if (exp < now) {\r\n                callback({ status:\"fail\", message: \"expired token\" })\r\n            } else if (decode.type === \"refresh_token\") {\r\n                callback({ status:\"fail\", message: \"use your valid access_token\" })\r\n            } else {\r\n                callback({ status:\"success\", users: decode})\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nconst checkRefreshToken = ({ refresh_token, callback }) => {\r\n    jwt.verify(refresh_token, secretKey, { algorithms: ['HS256'] }, (err, decode) => { \r\n        if (err) {\r\n            callback({status: \"fail\", message:err })\r\n        } else {\r\n            const exp = new Date(decode.exp * 1000)\r\n            const now = Date.now()\r\n            if (exp < now) {\r\n              callback({ status:\"fail\", message: \"expired token\" })\r\n            } else {\r\n              callback({ status:\"success\", users: decode})\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nconst computeHMAC = (userid, password) => {\r\n    return createHash('sha256').update(userid + \":\" +password).digest('hex');\r\n} \r\n\r\nexport { createToken, createRefreshToken, checkToken, computeHMAC, checkRefreshToken };"],"mappings":"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"}