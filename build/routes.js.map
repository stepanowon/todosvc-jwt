{"version":3,"file":"routes.js","names":["_tododao","require","_authutil","_default","exports","app","get","req","res","console","log","render","title","subtitle","post","_req$body","body","userid","password","username","hashedPassword","computeHMAC","result","createUser","json","_req$body2","doc","findUser","status","access_token","createToken","role","refresh_token","createRefreshToken","type","message","cookies","checkRefreshToken","callback","jwtresult","_jwtresult$users","users","response","getTodoList","_req$body3","todo","desc","addTodo","id","parseInt","params","deleteTodo","next","err","Error","use","jsonp"],"sources":["../src/routes.js"],"sourcesContent":["import { createUser, findUser , getTodoList, addTodo, deleteTodo } from './tododao';\r\nimport { createToken, computeHMAC, createRefreshToken, checkRefreshToken } from './authutil';\r\n\r\nexport default (app) => { \r\n\r\n    app.get('/', (req, res) => {\r\n        console.log(\"### GET /\");\r\n        res.render('index', {\r\n             title: 'jwt 인증 테스트 서비스 v1.0',\r\n             subtitle : '(node.js + express + lokijs + jwt)'\r\n        })\r\n    });\r\n\r\n    app.post('/users/create', (req, res)=> {\r\n        console.log(\"### POST /users/create\");\r\n        let { userid, password, username } = req.body;\r\n        let hashedPassword = computeHMAC(userid, password);\r\n        const result = createUser({ userid, username, password:hashedPassword });\r\n        res.json(result);\r\n    })\r\n\r\n    app.post('/login', (req,res)=> {\r\n        console.log(\"### POST /login\")\r\n        let { userid, password } = req.body;\r\n        let hashedPassword = computeHMAC(userid, password);\r\n        const doc = findUser({ userid, password:hashedPassword });\r\n        if (doc && doc.status === \"success\") {\r\n            let access_token = createToken({ userid, role:doc.role })\r\n            let refresh_token = createRefreshToken({ userid, type:\"refresh_token\", role:doc.role })\r\n            return res.json({ status:\"success\", message:\"로그인 성공\", access_token, refresh_token })\r\n        } else {\r\n            return res.json(doc)\r\n        }\r\n    })\r\n\r\n    app.post('/token', (req, res)=>{\r\n        console.log(\"### POST /token\")\r\n        let { refresh_token } = req.body;\r\n        if (req.cookies[\"refresh_token\"]) {\r\n            refresh_token = req.cookies[\"refresh_token\"];\r\n        }\r\n        console.log(req.cookies);\r\n        if (!refresh_token) {\r\n            return res.json({ \r\n                status:\"fail\", \r\n                message:\"refresh_token이 존재하지 않습니다. Request body 또는 http only cookie로 전달하세요\" \r\n            })\r\n        } else {\r\n            checkRefreshToken({ refresh_token, callback: (jwtresult) => {\r\n                if (jwtresult.status === \"success\") {\r\n                    let {userid, role, type } = jwtresult.users;\r\n                    let access_token = createToken({ userid, role })\r\n                    let refresh_token = createRefreshToken({ userid, type, role })\r\n                    return res.json({ status:\"success\", message:\"토큰 갱신 성공\", access_token, refresh_token })\r\n                } else {\r\n                    return res.json(jwtresult);\r\n                }\r\n            }})\r\n        }\r\n    })\r\n\r\n    app.get('/todolist',  (req,res)=> {\r\n        console.log(\"### GET /todolist : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let response = getTodoList({ userid });\r\n        res.json(response);\r\n    })\r\n\r\n    app.post('/todolist', (req,res) => {\r\n        console.log(\"### POST /todolist : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let { todo, desc } = req.body;\r\n        let response = addTodo({ userid, todo, desc })\r\n        res.json(response);\r\n    })\r\n\r\n    app.delete('/todolist/:id', (req, res)=> {\r\n        console.log(\"### PUT /todolist/:id : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let id = parseInt(req.params.id, 10);\r\n        let response = deleteTodo({ userid, id });\r\n        res.json(response);\r\n    })\r\n    \r\n    //----에러 처리 시작\r\n    app.get('*', (req, res, next) => {\r\n        var err = new Error();\r\n        err.status = 404;\r\n        next(err);\r\n    });\r\n\r\n    app.use((err, req, res, next) => {\r\n        console.log(\"### ERROR!!\")\r\n        if(err.status === 404) {\r\n            res.status(404).json({ status:404, message:\"잘못된 URI 요청\"});\r\n        } else if (err.status === 500) {\r\n            res.status(500).json({ status:500, message:\"내부 서버 오류\"});\r\n        } else {\r\n            res.status(err.status).jsonp({ status:\"fail\", message:err.message });\r\n        }\r\n    });\r\n\r\n\r\n}"],"mappings":"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","ignoreList":[]}