{"version":3,"file":"routes.js","names":["_tododao","require","_authutil","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","r","l","t","Symbol","iterator","e","u","a","f","next","done","push","value","isArray","_default","exports","app","get","req","res","console","log","render","title","subtitle","post","_req$body","body","userid","password","username","hashedPassword","computeHMAC","result","createUser","json","_req$body2","doc","findUser","status","access_token","createToken","role","refresh_token","createRefreshToken","type","message","auth_header","headers","authorization","_auth_header$split","split","_auth_header$split2","token","checkRefreshToken","callback","jwtresult","_jwtresult$users","users","response","getTodoList","_req$body3","todo","desc","addTodo","id","parseInt","params","deleteTodo","err","Error","use","jsonp"],"sources":["../src/routes.js"],"sourcesContent":["import { createUser, findUser , getTodoList, addTodo, deleteTodo } from './tododao';\r\nimport { createToken, computeHMAC, createRefreshToken, checkRefreshToken } from './authutil';\r\n\r\nexport default (app) => { \r\n\r\n    app.get('/', (req, res) => {\r\n        console.log(\"### GET /\");\r\n        res.render('index', {\r\n             title: 'jwt 인증 테스트 서비스 v1.0',\r\n             subtitle : '(node.js + express + lokijs + jwt)'\r\n        })\r\n    });\r\n\r\n    app.post('/users/create', (req, res)=> {\r\n        console.log(\"### POST /users/create\");\r\n        let { userid, password, username } = req.body;\r\n        let hashedPassword = computeHMAC(userid, password);\r\n        const result = createUser({ userid, username, password:hashedPassword });\r\n        res.json(result);\r\n    })\r\n\r\n    app.post('/login', (req,res)=> {\r\n        console.log(\"### POST /login\")\r\n        let { userid, password } = req.body;\r\n        let hashedPassword = computeHMAC(userid, password);\r\n        const doc = findUser({ userid, password:hashedPassword });\r\n        if (doc && doc.status === \"success\") {\r\n            let access_token = createToken({ userid, role:\"users\" })\r\n            let refresh_token = createRefreshToken({ userid, type:\"refresh_token\", role:\"users\" })\r\n            res.json({ status:\"success\", message:\"로그인 성공\", access_token, refresh_token })\r\n        } else {\r\n            res.json(doc)\r\n        }\r\n    })\r\n\r\n    app.post('/token', (req, res)=>{\r\n        console.log(\"### POST /token\")\r\n        let { refresh_token } = req.body;\r\n        console.log(refresh_token)\r\n        if (!refresh_token) {\r\n            let auth_header = req.headers.authorization;\r\n            if (auth_header) {\r\n                let [ name, token ] = auth_header.split(\" \")\r\n                if (typeof(name) === \"string\" && name === \"Bearer\") {\r\n                    refresh_token = token;\r\n                } else {\r\n                    res.json({ status:\"fail\", message:\"토큰의 형식이 올바르지 않습니다. Bearer Token 형식을 사용합니다.\" })\r\n                }\r\n            } else {\r\n                res.json({ status:\"fail\", message:\"authorization 요청 헤더를 통해 토큰이 전달되지 않았습니다.\" })\r\n            }\r\n        } \r\n        console.log(refresh_token)\r\n        \r\n        checkRefreshToken({ refresh_token, callback: (jwtresult) => {\r\n            if (jwtresult.status === \"success\") {\r\n              let {userid, role, type } = jwtresult.users;\r\n              let access_token = createToken({ userid, role })\r\n              let refresh_token = createRefreshToken({ userid, type, role })\r\n              res.json({ status:\"success\", message:\"토큰 갱신 성공\", access_token, refresh_token })\r\n            } else {\r\n              res.json(jwtresult);\r\n            }\r\n        }})\r\n    })\r\n\r\n    app.get('/todolist',  (req,res)=> {\r\n        console.log(\"### GET /todolist : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let response = getTodoList({ userid });\r\n        res.json(response);\r\n    })\r\n\r\n    app.post('/todolist', (req,res) => {\r\n        console.log(\"### POST /todolist : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let { todo, desc } = req.body;\r\n        let response = addTodo({ userid, todo, desc })\r\n        res.json(response);\r\n    })\r\n\r\n    app.delete('/todolist/:id', (req, res)=> {\r\n        console.log(\"### PUT /todolist/:id : \" + req.users.userid);\r\n        let userid = req.users.userid;\r\n        let id = parseInt(req.params.id, 10);\r\n        let response = deleteTodo({ userid, id });\r\n        res.json(response);\r\n    })\r\n    \r\n    //----에러 처리 시작\r\n    app.get('*', (req, res, next) => {\r\n        var err = new Error();\r\n        err.status = 404;\r\n        next(err);\r\n    });\r\n\r\n    app.use((err, req, res, next) => {\r\n        console.log(\"### ERROR!!\")\r\n        if(err.status === 404) {\r\n            res.status(404).json({ status:404, message:\"잘못된 URI 요청\"});\r\n        } else if (err.status === 500) {\r\n            res.status(500).json({ status:500, message:\"내부 서버 오류\"});\r\n        } else {\r\n            res.status(err.status).jsonp({ status:\"fail\", message:err.message });\r\n        }\r\n    });\r\n\r\n\r\n}"],"mappings":"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"}